#    -*- mode: org -*-


Archived entries from file /Users/samuelbarreto/Dropbox/Cours/Master/Semestre4/StageM2/seq_novembre/README.org


* TODO Positions terminales de switch [1/3]
:PROPERTIES:
:ARCHIVE_TIME: 2015-11-27 Fri 22:59
:ARCHIVE_FILE: ~/Dropbox/Cours/Master/Semestre4/StageM2/seq_novembre/README.org
:ARCHIVE_OLPATH: Scripts/Analyse des variants
:ARCHIVE_CATEGORY: README
:ARCHIVE_TODO: TODO
:END:
- [ ] voir avec vincent le test à utiliser pour comparer les distributions
- [ ] comparer les distributions statistiquement, si $n$ est suffisamment grand. 
- [X] Naïvement on utilise ici la position terminale du dernier SNP. Cependant,
  il existe des SNPs qui ne sont pas dans la conversion track, c'est ce qu'on a
  observé. Il faut donc définir une nouvelle fonction =max_pos= qui définit si
  on est bien à un SNP calibré ou non. voir après avoir définit la fonction
  =is_a_position=.

On veut ici analyser la distribution des positions terminales de SNP. C'est à dire à quel
endroit on bascule à nouveau sur le génotype sauvage. On ne garde que les
positions qui sont des positions calibrées. 

#+BEGIN_SRC R :tangle ./scripts/variant_analysis.R
  ##==============================================================================
  ## POSITION DE SWITCH
  ##==============================================================================

  pdf(file = "../../analysis/switch_distrib.pdf", height = 5.8, width = 8.3)

  snp_data %>%
      ## par plasmide -- et par type de mutant
      group_by(name, mutant) %>%
      ## garde seulement les positions calibrées
      filter(position == "oui") %>% 
      ## cherche la postion minimale de SNP
      summarise(offset_on_subject = min(offset_on_subject)) %>% 
      ## represente la distribution
      plot_snp(legend_position = c(0.8, 0.8)) +
      ggtitle("Distribution de la position de switch en fonction du type de mutant") +
      ## superpose les deux distribution pour comparer
      facet_grid( mutant ~ .) 

  dev.off()
#+END_SRC


* DONE ajouter un moyen de n'analyser que les séquences filtrées
CLOSED: [2015-12-30 Wed 23:26]
:PROPERTIES:
:ARCHIVE_TIME: 2016-01-04 Mon 16:07
:ARCHIVE_FILE: ~/stage/seq_novembre/README.org
:ARCHIVE_OLPATH: Scripts/Deuxième version
:ARCHIVE_CATEGORY: README
:ARCHIVE_TODO: DONE
:END:
Ajouter un moyen de n'analyser que les séquences précédemment filtrée dans la
première version. Notamment sur la qualité et la longueur. Parce que ça bugge
avec ce message d'erreur :
#+BEGIN_EXAMPLE
 erreur d''evaluation de l'argument 'X' lors de la s'election d'une m'ethode pour la fonction 'lapply' : Error in setAllelePhase(obj = ., refseq = ref) (from README.org[*Org Src README.org[ R ]*]!95837shv#4) :
  Seed length not long enough. Must provide at least 10 bases of good
           matching sequence.
#+END_EXAMPLE

* DONE cleanup code
CLOSED: [2016-01-04 Mon 16:32]
:PROPERTIES:
:ARCHIVE_TIME: 2016-01-04 Mon 16:32
:ARCHIVE_FILE: ~/stage/seq_novembre/README.org
:ARCHIVE_OLPATH: Scripts/Deuxième version
:ARCHIVE_CATEGORY: README
:ARCHIVE_TODO: DONE
:END:

* Alignement
:PROPERTIES:
:ARCHIVE_TIME: 2016-01-14 Thu 09:18
:ARCHIVE_FILE: ~/Dropbox/Cours/Master/Semestre4/StageM2/seq_novembre/README.org
:ARCHIVE_OLPATH: Analyse des positions hétérozygotes
:ARCHIVE_CATEGORY: STAGE
:END:
#+BEGIN_SRC R :tangle ./scripts/sangerseq.R
  ##' .. content for \description{} (no empty lines) ..
  ##' Aligne les données de la séquence primaire avec ceux de la séquence
  ##' secondaire, en utilisant un algorithme TODO de type SM.
  ##' .. content for \details{} ..
  ##' @title aligner
  ##' @param seq l'objet sangerseq d'intérêt.
  ##' @param name le nom de la séquence, NSE.
  ##' @return un tableau contenant la position, la base du pic majeur,
  ##' la base du pic secondaire et le nom de la séquence.
  aligner <- function(seq, name)
  {
    argname <- deparse(substitute(seq))
    pairwiseAlignment(primarySeq(seq), secondarySeq(seq),
                      type= "global-local") %>%
      mismatchTable() %>%
      ## ne garde que les bases litigieuses et leur position
      select(primaire   = PatternSubstring,
             secondaire = SubjectSubstring,
             position   = PatternStart) %>%
      ## trim les positions de faible qualité
      filter(position > 40, # première position de bonne qualité
             position < length(primarySeq(seq)) - 40) %>% # dernière position de bonne qualité.
      mutate(name = name) # ajoute une colonne avec le nom de la séquence.
  }

  pW85_mm <- aligner(pW85, "pW85")
  pW85_mm

#+END_SRC


* Pooling
:PROPERTIES:
:ARCHIVE_TIME: 2016-01-14 Thu 09:18
:ARCHIVE_FILE: ~/Dropbox/Cours/Master/Semestre4/StageM2/seq_novembre/README.org
:ARCHIVE_OLPATH: Analyse des positions hétérozygotes
:ARCHIVE_CATEGORY: STAGE
:END:
#+BEGIN_SRC R :tangle ./scripts/sangerseq.R

  id_table <- tbl_df(read.table("../id_table.dat", stringsAsFactors = FALSE, head = TRUE))
  ## rebascule les données litigieuses dans les bonnes catégories
  ## voir les premiers scripts.
  id_table$mutant[id_table$name == "pS60-1073"] <- "weak"
  id_table$mutant[id_table$name == "pS83-1073"] <- "weak"
  id_table$mutant[id_table$name == "pS92-1073"] <- "weak"
  id_table$mutant[id_table$name == "pS91-1073"] <- "weak"
  id_table$mutant[id_table$name == "pW6-1073" ] <- "strong"
  ## élimine les fichiers aux données manquantes
  id_table <- filter(id_table, name != "pS6-1073", name != "pS9-1073")

  ##' .. content for \description{} (no empty lines) ..
  ##' Appelle les bases principales et secondaires par fichier,
  ##' et aligne avec la séquence de référence.
  ##' .. content for \details{} ..
  ##' @title mismatcher
  ##' @param sequence char, le nom de la séquence.
  ##' @param ref DNAString, la séquence de référence.
  ##' @return
  mismatcher <- function(sequence, ref)
  {
    baseCaller(query = paste0("../spectrograms/", sequence, ".ab1"), ref) %>%
    aligner(., sequence)
  }


  ## baseCaller(query = paste0("../spectrograms/", id_table$name[1], ".ab1"), ref)
  ## test_id_table <- id_table %>% sample_n(30)

  result_table <- do.call(
    rbind,
    lapply(
      lapply(id_table$name, function(x) mismatcher(sequence = x, ref = ref)),
      data.frame
    )
  )

  write.csv(result_table, file = "result_table")

  result_table %>%
    tbl_df() %>%
    inner_join(id_table, by = "name") %>%
    filter(mutant == "strong") %>%
    print()

#+END_SRC


* Sens des mutations
:PROPERTIES:
:ARCHIVE_TIME: 2016-01-14 Thu 09:18
:ARCHIVE_FILE: ~/Dropbox/Cours/Master/Semestre4/StageM2/seq_novembre/README.org
:ARCHIVE_OLPATH: Analyse des positions hétérozygotes
:ARCHIVE_CATEGORY: STAGE
:END:
#+BEGIN_SRC R :tangle ./scripts/sangerseq.R

#+TODO: ?mergeIUPACLetters

  iupac_code <-
  "
  iupac,meaning
  A,A
  C,C
  G,G
  T,T
  M,AC
  R,AG
  W,AT
  S,CG
  Y,CT
  K,GT
  V,ACG
  H,ACT
  D,AGT
  B,CGT
  X,GATC
  N,GATC
  "
  read.csv(text = iupac_code, stringsAsFactors = FALSE) %>% tbl_df() -> iupac

  is_iupac <- function(base) ifelse(base %in% c("A", "T", "C", "G"), FALSE, TRUE)

  iupacker <- function(subject, query)
  {

    lapply(
      str_split(paste0(subject, query), ""),
      sort)
  }

  result_table %>%
    filter( is_iupac(SubjectSubstring)) %>%
    inner_join(y = iupac, by = c("SubjectSubstring" = "iupac"))

#+END_SRC


* Analyses
:PROPERTIES:
:ARCHIVE_TIME: 2016-01-14 Thu 09:18
:ARCHIVE_FILE: ~/Dropbox/Cours/Master/Semestre4/StageM2/seq_novembre/README.org
:ARCHIVE_OLPATH: Analyse des positions hétérozygotes
:ARCHIVE_CATEGORY: STAGE
:END:
#+BEGIN_SRC R :tangle ./scripts/sangerseq.R
peakAmpMatrix(pW85) %>%
  as.data.frame() %>%
  tbl_df() %>%
  mutate(pos = rownames(.)) %>%
  gather(trace, value, V1:V4) -> peakmatrix

traceMatrix(pW85) %>%
  as.data.frame() #%>%
  tbl_df() %>%
  mutate(pos = rownames(.)) %>%
  gather(trace, value, V1:V4) -> tracematrix
#+END_SRC

