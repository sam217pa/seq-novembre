# -*- mode: org; -*-

#+begin_src emacs-lisp :results none :export none
  (org-babel-tangle-file "README.org")
#+end_src

Le dossier contient les données du séquençage des deux plaques envoyées à la
suite des manips d'Anne-Laure. 

* Tâches [0/5]
** TODO écrire le script python qui filtre les données sur la qualité
** TODO comparer fastqc output
** TODO refaire le SNP calling
** TODO analyser les données de SNP
** TODO préparer résultats vendredi
DEADLINE: <2015-11-20 Fri 10:00>

* structure
#+BEGIN_SRC sh :results verbatim 
tree ./ -L 2
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
./
├── README
├── README[*Org\ Src\ README[\ python\ ]*]
├── analysis
│   └── vincent_plot.pdf
├── data
│   ├── 1369607.INDEL.csv
│   ├── 1369607.SNP.csv
│   ├── 1369628.INDEL.csv
│   ├── 1369628.SNP.csv
│   ├── Analysis_Summary-Sanger_Pipeline.pdf
│   ├── all.fasta
│   ├── fasta
│   ├── fastq
│   ├── raw_seq_nvbr
│   ├── seq
│   └── spectrograms
└── scripts
    ├── ab1_parser.py
    ├── ab1_to_fastq
    ├── exploratory_analysis.R
    └── extract_raw_data.sh

8 directories, 13 files
#+END_EXAMPLE

| dir      | file                | description                                                  |
|----------+---------------------+--------------------------------------------------------------|
| data     | all.fasta           | l'ensemble des séquences fasta combinées en un fichier.      |
|          |                     | facilite l'analyse python                                    |
| data     | refseq.fasta        | contient la séquence WT du gène d'intérêt                    |
| scripts  | ab1_parser.py       | convertit les fichiers .ab1 en fichier fastq. d'un seul coup |
| scripts  | ab1_to_fastq        | convertit le fichier ab1 du stdin en fastq du stdout         |
| scripts  | extract_raw_data.sh | extrait l'ensemble des données des fichiers .zip             |
| analysis | vincent_plot.pdf    | le graphe de vincent du [2015-11-02 Mon]                     |
* data
** raw_seq_nvbr
Contient les deux dataset au format .zip. DO NOT TOUCH.
** extraction des données
Pour extraire les données du fichier brut .zip à la structure de données.

#+BEGIN_SRC sh :tangle ./scripts/extract_raw_data.sh 
  #!/bin/bash 

  # Le script qui extrait les données depuis les fichiers zip bruts et qui met en
  # place la structure de fichier.

  cd ./data # à modifier en cd ../data quand dans dossier `scripts'
  # extraction des données brutes
  unzip raw_seq_nvbr/1369607.zip
  unzip raw_seq_nvbr/1369628.zip
  # déplace tout les fichiers dans des dossiers adaptés 
  find . -name "*.fas" -exec mv -i {} -t ./fasta/ \;
  find . -name "*.ab1" -exec mv -i {} -t ./spectrograms/ \;
  find . -name "*.seq" -exec mv -i {} -t ./seq/ \;
  # déplace le contenu du dossier inutile dans le présent dossier
  mv 1369628/* ./
  rm -r 1369628 # supprime le dossier

  ##
  ## supprime fichiers mauvaise qualité
  ##
  # absence de données dans pS6-1073.fas
  # on repart des données de .ab1
  rm ./fasta/*.fas

  ##
  ## combine tout les fasta en 1
  ##
  if [ -f all.fasta ]
  then
      rm all.fasta
      echo "Cleaning old files"
      touch all.fasta
  else
      touch all.fasta
  fi

  cat ../data/fasta/*.fst >> ../data/all.fasta
#+END_SRC
* analysis 
Contient les résultats des analyses. Graphes ou données transformées. 
* scripts 
Contient les différents scripts nécessaires pour aboutir aux contenus
d'~analysis~. 

** Analyses des csv 
#+BEGIN_SRC R :tangle ./scripts/exploratory_analysis.R 
  library(dplyr)
  library(ggplot2)

  read_result <- function(filename){
    readr::read_delim(filename, delim = ";")
  }

  snp_strong   <- read_result("./data/1369628.SNP.csv")
  snp_weak   <- read_result("./data/1369607.SNP.csv")
  indel_strong <- read_result("./data/1369628.INDEL.csv")
  indel_weak <- read_result("./data/1369607.INDEL.csv")
  snp_weak$mutant <- "weak"
  snp_strong$mutant <- "strong"

#+END_SRC
** ab1 python parser
*** ab1 -> (fastq , fasta)
**** d'un seul coup
C'est un script python qui convertit les fichiers .ab1 du dossier
[[./data/spectrograms/]]  en fichier .fastq, dans le dossier [[./data/fastq/]].  

1. lit les fichiers du dossier contenant .ab1
2. les transforme en fastq
3. vérifie si la qualité des données est suffisante.
   - si oui, continue
   - si non, ne pas les écrire.
4. trimme les premières et dernières bases de mauvaises qualité. 
5. écriture sur le disque dans le dosssier fastq.

#+BEGIN_SRC python :tangle ./scripts/ab1_parser.py
  #!/usr/bin/env python
  import os
  from Bio import SeqIO

  # lit tout les fichiers du dossier spectrogram
  for file_name in os.listdir("../data/spectrograms/"):
      # check if it ends with .ab1
      if file_name.endswith(".ab1"):
          print("parsing sequences from " + file_name)
    
          ab1_in = "../data/spectrograms/" + file_name
          fastq_out = "../data/fastq/" + file_name[0:-4] + ".fastq"
          fasta_out = "../data/fasta/" + file_name[0:-4] + ".fst"
          # convert the file
          SeqIO.convert(ab1_in, "abi", fastq_out, "fastq-illumina")
          SeqIO.convert(ab1_in, "abi", fasta_out, "fasta")

#+END_SRC

**** from stdin
#+BEGIN_SRC python :tangle ./scripts/ab1_to_fastq
  #!/usr/bin/env python
  """
  ============
  ab1_to_fastq
  ============

  Un module pour convertir le fichier .ab1 en fichier fastq.
  À noter que le stdin en question doit être une liste de nom de fichiers
  ab1. 

  Example:
  ls | grep ab1 | ab1_to_fastq
  """

  from __future__ import print_function
  import sys
  from Bio import SeqIO

  for line in sys.stdin:
      assert line.rstrip().endswith(".ab1"), "not an ab1 file"
      with open(line.rstrip(), "rb") as ab1_file:
          ab1_record = SeqIO.read(ab1_file, "abi")
          print(ab1_record.format("fastq"))

#+END_SRC
** analyses fastqc
Le script utilisé pour analyser les données de qualité via /fastqc/. 

#+BEGIN_SRC sh :tangle scripts/quality_check
  #!/usr/local/bin/bash
  # quand dans le dossier ./scripts
  cd ../data/

  if [ -d tmp ]; then # si le dossier tmp existe
      rm tmp/all.fastq
      cat fastq/*.fastq > all.fastq
  else
      mkdir tmp
      cat fastq/*.fastq > all.fastq
  fi

  fastqc tmp/all.fastq # analyse les données
  mv tmp/all_fastqc.html ../analysis/ # déplace dans le dossier résultat. 
#+END_SRC 

* Commentaires
** [2015-11-09 Mon]
Pas de données dans le fichier [[./data/fasta/pS6-1073.fas]], mais pourtant le
fichier [[./data/spectrograms/pS6-1073.ab1]] en contient. On repart des .ab1 avec un
script [[./scripts/ab1_parser.py]], qui convertit les .ab1 en fasta et fastq. 

Le fichier [[./data/fasta/pS6-1073.fst]] est toujours aussi mauvais. Erreurs de
séquençage ? À exclure des analyses. 

Le fichier [[./data/fasta/pS9-1073.fst]] a un indel en position 343-342 et en
position 397. Au vu du spectrogramme [[./data/spectrograms/pS9-1073.ab1]], c'est une
erreur de séquençage. Globalement, qualité du séquençage pas très bonne. À
exclure des analyses.

** [2015-11-16 Mon]
La semaine dernière, le script [[./scripts/ab1_parser.py]] convertissait tous les
spectrograms de =ab1= vers =fastq=. Combiné en 1 fichier, =all.fastq=, on a
utilisé /fastqc/ pour avoir une idée de la qualité. Le résultat dans
[[./analysis/all_fastqc.html]]. Il a été convenu arbitrairement avec Vincent que les bases d'une
qualité < 28 seraient exclues de l'analyse. Aujourd'hui, le script
[[./scripts/ab1_parser.py]] va être modifié en conséquence. Voir les anciennes
versions via /git/ éventuellement.

