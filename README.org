# -*- mode: org; -*-

#+begin_src emacs-lisp :results none :export none
  (org-babel-tangle-file "README.org")
#+end_src

Le dossier contient les données du séquençage des deux plaques envoyées à la
suite des manips d'Anne-Laure. 

* Tâches [3/7]
- [X] écrire le script qui filtre les données sur la qualité
- [X] comparer fastqc output
- [X] refaire le SNP calling
- [ ] réécrire les étapes pour arriver au SNP calling
- [ ] faire un SQL join dans R pour matcher query name et seq id.
- [ ] analyser les données de SNP
- [ ] préparer résultats vendredi <2015-11-20 Fri 10:00> 

* structure
#+BEGIN_SRC sh :results verbatim 
tree ./ -L 2
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
./
├── README
├── README[*Org\ Src\ README[\ python\ ]*]
├── analysis
│   └── vincent_plot.pdf
├── data
│   ├── 1369607.INDEL.csv
│   ├── 1369607.SNP.csv
│   ├── 1369628.INDEL.csv
│   ├── 1369628.SNP.csv
│   ├── Analysis_Summary-Sanger_Pipeline.pdf
│   ├── all.fasta
│   ├── fasta
│   ├── fastq
│   ├── raw_seq_nvbr
│   ├── seq
│   └── spectrograms
└── scripts
    ├── ab1_parser.py
    ├── ab1_to_fastq
    ├── exploratory_analysis.R
    └── extract_raw_data.sh

8 directories, 13 files
#+END_EXAMPLE

| dir      | file                | description                                                  |
|----------+---------------------+--------------------------------------------------------------|
| data     | all.fasta           | l'ensemble des séquences fasta combinées en un fichier.      |
|          |                     | facilite l'analyse python                                    |
| data     | refseq.fasta        | contient la séquence WT du gène d'intérêt                    |
| scripts  | ab1_parser.py       | convertit les fichiers .ab1 en fichier fastq. d'un seul coup |
| scripts  | ab1_to_fastq        | convertit le fichier ab1 du stdin en fastq du stdout         |
| scripts  | extract_raw_data.sh | extrait l'ensemble des données des fichiers .zip             |
| analysis | vincent_plot.pdf    | le graphe de vincent du [2015-11-02 Mon]                     |
* data
** raw_seq_nvbr
Contient les deux dataset au format .zip. DO NOT TOUCH.
** extraction des données
Pour extraire les données du fichier brut .zip à la structure de données.

#+BEGIN_SRC sh :tangle ./scripts/extract_raw_data.sh 
  #!/bin/bash 

  # Le script qui extrait les données depuis les fichiers zip bruts et qui met en
  # place la structure de fichier.

  cd ./data # à modifier en cd ../data quand dans dossier `scripts'
  # extraction des données brutes
  unzip raw_seq_nvbr/1369607.zip
  unzip raw_seq_nvbr/1369628.zip
  # déplace tout les fichiers dans des dossiers adaptés 
  find . -name "*.fas" -exec mv -i {} -t ./fasta/ \;
  find . -name "*.ab1" -exec mv -i {} -t ./spectrograms/ \;
  find . -name "*.seq" -exec mv -i {} -t ./seq/ \;
  # déplace le contenu du dossier inutile dans le présent dossier
  mv 1369628/* ./
  rm -r 1369628 # supprime le dossier

  ##
  ## supprime fichiers mauvaise qualité
  ##
  # absence de données dans pS6-1073.fas
  # on repart des données de .ab1
  rm ./fasta/*.fas

  ##
  ## combine tout les fasta en 1
  ##
  if [ -f all.fasta ]
  then
      rm all.fasta
      echo "Cleaning old files"
      touch all.fasta
  else
      touch all.fasta
  fi

  cat ../data/fasta/*.fst >> ../data/all.fasta
#+END_SRC
* analysis 
Contient les résultats des analyses. Graphes ou données transformées. 
* scripts 
Contient les différents scripts nécessaires pour aboutir aux contenus
d'~analysis~. 

** Analyses préliminaires des csv 
#+BEGIN_SRC R :tangle ./scripts/exploratory_analysis.R 
  library(dplyr)
  library(ggplot2)

  read_result <- function(filename){
    readr::read_delim(filename, delim = ";")
  }

  snp_strong   <- read_result("./data/1369628.SNP.csv")
  snp_weak   <- read_result("./data/1369607.SNP.csv")
  indel_strong <- read_result("./data/1369628.INDEL.csv")
  indel_weak <- read_result("./data/1369607.INDEL.csv")
  snp_weak$mutant <- "weak"
  snp_strong$mutant <- "strong"

#+END_SRC
** ab1 -> (fastq , fasta)
*** d'un seul coup
C'est un script python qui convertit les fichiers .ab1 du dossier
[[./data/spectrograms/]]  en fichier .fastq, dans le dossier [[./data/fastq/]].  

1. lit les fichiers du dossier contenant .ab1
2. les transforme en fastq
3. écriture sur le disque dans le dosssier fastq.

#+BEGIN_SRC python :tangle ./scripts/ab1_parser.py
  #!/usr/bin/env python
  import os
  from Bio import SeqIO

  # lit tout les fichiers du dossier spectrogram
  for file_name in os.listdir("../data/spectrograms/"):
      # check if it ends with .ab1
      if file_name.endswith(".ab1"):
          print("parsing sequences from " + file_name)

          ab1_in = "../data/spectrograms/" + file_name
          fastq_out = "../data/fastq/" + file_name[0:-4] + ".fastq"
          fasta_out = "../data/fasta/" + file_name[0:-4] + ".fst"
          # convert the file
          SeqIO.convert(ab1_in, "abi", fastq_out, "fastq")
          SeqIO.convert(ab1_in, "abi", fasta_out, "fasta")

#+END_SRC

*** from stdin
#+BEGIN_SRC python :tangle ./scripts/ab1_to_fastq
  #!/usr/bin/env python
  """
  ============
  ab1_to_fastq
  ============

  Un module pour convertir le fichier .ab1 en fichier fastq.
  À noter que le stdin en question doit être une liste de nom de fichiers
  ab1. 

  Example:
  ls | grep ab1 | ab1_to_fastq
  """

  from __future__ import print_function
  import sys
  from Bio import SeqIO

  for line in sys.stdin:
      assert line.rstrip().endswith(".ab1"), "not an ab1 file"
      with open(line.rstrip(), "rb") as ab1_file:
          ab1_record = SeqIO.read(ab1_file, "abi")
          print(ab1_record.format("fastq"))

#+END_SRC

** untrimmed.fastq -> trimmed.fastq
Un script qui convertit le fichier [[./data/untrimmed.fastq]] en fichier [[./data/trimmed.fastq]]

#+BEGIN_SRC sh :tangle ./scripts/trim_low_quality.sh
  #!/usr/local/bin/bash

  #' -qtrim=rl : quality trim right and left 
  #' -trimq=28 : trim if quality < 28 (sanger encoding, illumina 1.9)
  #' -minlen=620 : keep only seq with length > 620, after trimming.
  #' -Xmx1g : tells bbduk to use 1G of RAM

  if [[ -f ../data/untrimmed.fastq && ! -f ../data/trimmed.fastq ]]; then # seulement si les fichiers n'existent pas. 
      ~/.bin/bbmap/bbduk.sh -Xmx1g -in=../data/untrimmed.fastq -out=../data/trimmed.fastq qtrim=rl trimq=28 -minlen=620
  else
      rm ../data/trimmed.fastq
      rm ../data/untrimmed.fastq
      ./quality_check # assemble tous les fichiers .fastq de novo
      ~/.bin/bbmap/bbduk.sh -Xmx1g -in=../data/untrimmed.fastq -out=../data/trimmed.fastq qtrim=rl trimq=28 -minlen=620
  fi

  fastqc trimmed.fastq -o ./tmp
  mv ./tmp/trimmed_fastqc.html ../analysis
#+END_SRC
** quality check : analyses fastqc
Le script utilisé pour analyser les données de qualité via /fastqc/. 

#+BEGIN_SRC sh :tangle scripts/quality_check
  #!/usr/local/bin/bash
  # quand dans le dossier ./scripts
  cd ../data/

  if [ -f untrimmed.fastq ]; then # si le dossier tmp existe
      rm untrimmed.fastq
      cat fastq/*.fastq > untrimmed.fastq
  else
      cat fastq/*.fastq > untrimmed.fastq
  fi

  fastqc untrimmed.fastq -o ./tmp # analyse les données et output dans tmp
  mv ./tmp/untrimmed_fastqc.html ../analysis/ # déplace dans le dossier résultat.
#+END_SRC 

** variant calling

#+name: Prérequis
#+BEGIN_SRC sh
  brew tap homebrew/homebrew-science
  brew update
  brew install samtools bamtools bcftools bwa
#+END_SRC

Clairement pas la bonne façon de s'y prendre. 
#+BEGIN_SRC sh :tangle ./scripts/variantCallerBwa.sh
  #!/bin/bash

  # le but est de déterminer les SNP
  # le workflow suivi est celui décrit là http://www.htslib.org/workflow/. 

  ## working dir
  cd ../data
  mkdir variantCalling

  ## utilise le reverse complement de la séquence de référence
  fastx_reverse_complement -i refseq.fasta -o refseq_reverse.fasta
  cp refseq_reverse.fasta variantCalling/
  cp trimmed.fastq variantCalling/

  cd variantCalling
  # renome en utilisant un nom plus simple
  mv refseq_reverse.fasta reference.fasta
  ## indexation du fichier référence
  bwa index reference.fasta
  # alignement au fichier de reference
  #' * aln : align
  #' * mem : algo bwa-mem, more accurate with reads > 100bp. 
  #' * reference.fasta : reference sequence
  #' * trimmed.fastq : sequence trimmee.
  #' * aln_sa.sai : fichier aligné indexé
  bwa mem reference.fasta trimmed.fastq > align.sam

  ## sort from name order to coordinate order
  #' * sort : sorting algorithm
  #' * -O bam : output to bam
  #' * -o align.bam : name of output
  #' * -T ./tmp/align_temp : name of temp file
  #' * align.sam : fichier en entrée
  mkdir tmp
  samtools sort -O bam -o align.bam -T ./tmp/align_temp align.sam

  ## conversion au format sam
  #' * samse : sam singled end
  #' * reference.fasta : reference sequence
  #' * aln_sa.sai : alignement indexé
  # bwa samse reference.fasta aln_sa.sai trimmed.fastq > aln.sam

  ## variant calling
  #'
  #'
  samtools mpileup -ugf reference.fasta align.bam | \
      bcftools call -vmO z -o study.vcf.gz

  ## indexation du VCF
  tabix -p vcf study.vcf.gz

  ## graphes et statistiques
  bcftools stats -F reference.fasta -s - study.vcf.gz > study.vcf.gz.stats
  mkdir plots
  plot-vcfstats -p plots/ study.vcf.gz.stats
  ## déplace dans le dossier analyses
  cp -r plots ../../analysis/
#+END_SRC

#+BEGIN_SRC sh :tangle ./scripts/variantCallerSsaha2.sh
  #!/bin/bash

  # variant calling using ssaha2 and ssaha2SNP

  ## alignement à la séquence de référence
  #'
  #'
  ~/.bin/ssahaSNP/ssaha2 ref.fasta reads.fastq ...

  ## polymorphism detection tool
  #'
  #'
  ~/.bin/ssahaSNP/ssaahaSNP
#+END_SRC
* Commentaires
** [2015-11-09 Mon]
Pas de données dans le fichier [[./data/fasta/pS6-1073.fas]], mais pourtant le
fichier [[./data/spectrograms/pS6-1073.ab1]] en contient. On repart des .ab1 avec un
script [[./scripts/ab1_parser.py]], qui convertit les .ab1 en fasta et fastq. 

Le fichier [[./data/fasta/pS6-1073.fst]] est toujours aussi mauvais. Erreurs de
séquençage ? À exclure des analyses. 

Le fichier [[./data/fasta/pS9-1073.fst]] a un indel en position 343-342 et en
position 397. Au vu du spectrogramme [[./data/spectrograms/pS9-1073.ab1]], c'est une
erreur de séquençage. Globalement, qualité du séquençage pas très bonne. À
exclure des analyses.
** [2015-11-16 Mon]
La semaine dernière, le script [[./scripts/ab1_parser.py]] convertissait tous les
spectrograms de =ab1= vers =fastq=. Combiné en 1 fichier, =all.fastq=, on a
utilisé /fastqc/ pour avoir une idée de la qualité. Le résultat dans
[[./analysis/all_fastqc.html]]. Il a été convenu arbitrairement avec Vincent que les bases d'une
qualité < 28 seraient exclues de l'analyse. Aujourd'hui, le script
[[./scripts/ab1_parser.py]] va être modifié en conséquence. Voir les anciennes
versions via /git/ éventuellement.

J'écris également aujourd'hui le script [[./scripts/trim_low_quality.py]], qui
enlève les 30 premières et dernières séquences, et qui empêche les séquences de
trop mauvaise qualité d'être utilisées dans l'analyse. 

Finalement, inutile de réinventer la roue. =Fastx_toolkit= devrait normalement
faire ça très bien, mais ça ne fonctionne pas, pour des raisons que je ne
m'explique pas. Cependant, je suis tombé sur l'utilitaire =BBmap=, qui contient
entre autre, =bbduk=. [[~/.bin/bbmap/bbduk.sh][Voir le fichier source ici]], la page de téléchargement [[http://sourceforge.net/projects/bbmap/?source=typ_redirect][là]],
et pour des commentaires sur l'utilisation [[http://seqanswers.com/forums/showthread.php?t=58221][Voir là]], et [[http://seqanswers.com/forums/showthread.php?t=42776][là]].

** [2015-11-17 Tue]
Je supprime donc le script =low_quality_trim.py=. J'utilise le script
=low_quality_trim.sh=. 

En résultat, comparer [[./analysis/trimmed_fastqc.html]] et
[[./analysis/untrimmed_fastqc.html]]. On n'a plus que 179 séquences au lieu de 192,
mais ça vaut le coup, la qualité est largement supérieure. 

Je veux maintenant déterminer les SNPs. Il faut donc que j'aligne les séquences
obtenues avec la séquence de référence [[./data/refseq.fasta]]. GATC utilise le
software =SSAHA2= (voir [[http://www.sanger.ac.uk/science/tools/ssaha2-0][là]]) mais à priori il n'est plus utilisable. Le site
recommande d'utiliser =SMALT=, (voir la page de téléchargement [[http://sourceforge.net/projects/smalt/?source=typ_redirect][là]], le manuel [[ftp://ftp.sanger.ac.uk/pub/resources/software/smalt/smalt-manual-0.7.4.pdf][là]]
et la page du software [[http://www.sanger.ac.uk/science/tools/smalt-0][là]]. 

En fait, je l'ai juste installé comme ça :

#+BEGIN_SRC sh
brew update
brew tap homebrew/homebrew-science
brew install smalt
#+END_SRC

Finalement, c'est encore un autre workflow que je veux adopter. On repart sur
=ssaha2= et =ssaha2SNP=, la page de téléchargement étant [[ftp://ftp.sanger.ac.uk/pub/resources/software/ssaha2/][ici]]. 

** [2015-11-18 Wed]
Il faut clarifier les étapes permettant d'aligner et de déterminer les SNP. Ce
qui est fait dans le script [[./scripts/variantCallerSsaha2.sh]]. 
